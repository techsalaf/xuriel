name: Build and Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout our repository code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Step 3: Cache Node.js dependencies
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Step 4: Install dependencies
    - name: Install Dependencies
      run: npm install

    # Step 5: Build the project
    - name: Build the Project
      run: npm run build

    # Step 6: Copy build files to the server
    - name: Copy Build Files
      run: |
        # Ensure the .ssh directory exists
        mkdir -p ~/.ssh
        # Add the server's SSH key to known_hosts
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        # Copy the build directory to the server using SCP
        scp -r ./public/build ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/xurislrm/public_html/public/build-temp -P 21098

    # Step 7: Deploy the build to the server via SSH
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 21098
        script: |
          cd /home/xurislrm/public_html
          mkdir -p public/build-temp
          if [ -d "public/build" ]; then
            mv public/build public/build-backup
            if [ -d "public/build-backup" ]; then
              rm -rf public/build-backup
            fi
          else
            echo "Directory public/build does not exist"
            exit 1
          fi

          # Now move the new build files
          mv public/build-temp public/build
